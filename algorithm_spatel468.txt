Algorithm for converting date of births(DOB) in the format "YYYYMMDD", "YYYY/MM/DD", "YYYY-MM-DD", and "YYYY.MM.DD" to the format: 'mmm d, yyyy", where "mmm" is the three letter abbreviated month's name, 
'd' is a one or two-digit day of the month, and 'yyyy' is the four-digit year (ex. "Oct 7, 2020").

1. Verify if the user the entered the right amount of arguements when calling the file, if they didnt then call the usage function which returns a string describing the usage of the function and exit
2. Define the proper values that will be needed in thier appropriate data types. The 3 letter names of the months will be in a list and the amount of days in each month will be in a dictonary where the keys
are the number of the month and the value of each key is the number of days in that month.
3. Store what the user entered as thier DOB in an variable and the allowed charecters as '0123456789'
4. Clean the input that the user entered and store it in a variable and print it using sanitize() which will return the DOB without the symbols in it. YYYY/MM/DD", "YYYY-MM-DD", and "YYYY.MM.DD ----> 	YYYYMMDD
5. Check if the sanitized user data is the right size. This is done using size_check() which returns true if the first parameter matches the size of the second integer entered and false if it doesnt.
6. If size_check() returns false print an error message and exit, if true then continue through the program
7. Store the first 4 characters as the year, the 5th and 6th as the month and the last 2 as the day in variables and convert them to integers
8. Check if the user entered an acceptable year using range_check() and store the result in a variable. This function returns true if the first arguement is between the lower and upper bounds specified the the second arguement, 
and it returns false if it doesnt
9. If range_check() returns False print an error message and exit. If it does not then continue through the program
10. Check if the user entered an acceptable month using range_check() and store the result in a variable. This function returns true if the first arguement is between the lower and upper bounds specified the the second arguement, 
and it returns false if it doesnt
11. If range_check() returns False print an error message and exit. If it does not then continue through the program
12. Check if the users DOB is in a leap year and store the result in a variable using leap_year() which returns true if it is and false if it isnt
13. If leap_year() returns true change the month of February to have 29 days in the dictonary that we defined earlier.
14. Check if the user entered an acceptable day using range_check() and store the result in a variable. This function returns true if the first arguement is between the lower and upper bounds specified the the second arguement, 
and it returns false if it doesnt
15. If range_check() returns False print an error message and exit. If it does not then continue through the program
16. Using string manipulation store the YYYYMMDD in a variable converted to mmm d, yyyy.
17. Print the final message.

Algorithm for leap_year(par1)
1. Leap years occur if the year is evenly divisble by 4. 
2. Years that are divisble by 100 cannot be leap years unless they are also divisible by 400.
3. Take the users inputted parameter as the year and use the above statements to determine if it is a leap year using modulo.
4. Return true if the inputted parameter is a leap year.

Algorithm for range_check(par1, par2)
1. par2 should be a tuples with two integers such as (1,12)
2. if par1 is greater then or equal to par2 at the lowerbound and if par1 is less then or equal to par2 at the upperbound, then return true
3. if it isnt then return false

Algorithm for sanitize(par1, par2)
1. create a new variable to store the accepted characters.
2. loop through each letter of par1 which is the users inputted data
3. if the letter is in par2 which is the string of allowed characters then store the letter to the end of the newly created variable
4 return the newly created variable

Algorithm for size_check(par1, par2)
1. Get the length of par1 using the builtin len() function and store it in a variable.
2. Check if the variable is equal to the integer given in par2
3. If they are equal return True
4. If they arent return False

Algorith for usage()
1. Create a string describing the usage of the script
2. Return the string












